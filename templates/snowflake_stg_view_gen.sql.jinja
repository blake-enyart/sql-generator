with join_filter as (
  
  select
    lower(all_columns.table_catalog) as source_db,
    lower(all_columns.table_schema) as source_schema,
    lower(all_columns.table_name) as source_table,
    'stg_' || 
    case source_schema
      when '{{ schema_filter }}' then '{{ dbt_source_name }}'
      else source_schema
    end || '__' || lower(source_table) || '.sql' as target_name,
    upper(all_columns.column_name) as column_name,
    all_columns.ordinal_position,
    lower(all_columns.data_type) as data_type,
    character_maximum_length,
    numeric_precision,
    numeric_scale,
    datetime_precision
  from
    {{ database }}.information_schema.columns all_columns
  where
    lower(source_schema) in ('{{ schema_filter }}')
    {%- if table_filter %}
    and lower(source_table) in ('{{ table_filter }}')
    {% endif -%}
    {%- if table_filter_fuzzy_exclude %}
    and lower(source_table) not like ('%{{ table_filter_fuzzy_exclude }}%')
    {% endif %}
),

src_beginning as (
  select
    source_db,
    source_schema,
    source_table,
    target_name,
    -9 ordinal_position,
    'with ' || lower(source_table) || ' as (\n\n' ||
    '    select *\n' ||
    '    from\n' ||
    {% raw %}
    '        {{ source(''' || 
    {% endraw %}
    case source_schema
      when '{{ schema_filter }}' then '{{ dbt_source_name }}'
      else source_schema
    {% raw %}
    end || ''', ''' || lower(source_table) || ''') }}\n' ||
    {% endraw %}
    '\n)' ||
    '\n' 
  as sql_text
  from
    join_filter
  where
    ordinal_position = 1
),

src_middle as (
  select
    source_db,
    source_schema,
    source_table,
    target_name,
    ordinal_position,
    case
      when ordinal_position = 1 then 
        'select\n' ||
        '    '
      else '    '
    end 
    ||
    case
      when lower(column_name) in ('createdon', 'updatedon') then '"' || column_name || '"' || '::timestamp as ' || '"' || column_name || '"'
      when data_type in ('text', 'varchar', 'varying') then 'trim(' || '"' || column_name || '"' || ') as ' || '"' || column_name || '"'
      when data_type in ('timestamp_tz', 'timestamp_ntz', 'timestamp_ltz') then '"' || column_name || '"' || '::timestamp as ' || '"' || column_name || '"' 
      else '"' || column_name || '"'|| ' /*' || data_type || '*/'
    end 
    as sql_text
  from
    join_filter
),

src_middle_agg as (
  select
    source_db,
    source_schema,
    source_table,
    target_name,
    2 as ordinal_position,
    listagg(sql_text, ',\n') within group (
      order by
        ordinal_position
    ) as sql_text
  from
    src_middle
group by
    1,2,3,4,5
),

src_end as (
  select
    source_db,
    source_schema,
    source_table,
    target_name,
    9999 as ordinal_position,
    'from ' || lower(source_table) || ' ' as sql_text
  from
    join_filter
  where
    ordinal_position = 1
),

src as (
    select * from src_beginning 
    union all
    select * from src_middle_agg
    union all
    select * from src_end  
),

stg_view_gen as (
  select
    src.source_db,
    src.source_schema,
    src.source_table,
    src.target_name,
    listagg(sql_text, '\n') within group (
      order by
        ordinal_position
    ) stage_ddl
  from
    src
  group by
    source_db,
    source_schema,
    source_table,
    target_name
  order by
    2 desc,
    3
),

columns as (
  select
    *
  from
    {{ database }}.information_schema.columns
),

yml_gen as (
  select
    table_schema,
    table_name,
    ordinal_position,
    '      - name: ' || lower(column_name) || '\n' ||
    '        description: tbd'  as yml
  from
    columns
  where
    lower(table_schema) in ('{{ schema_filter }}')
    {%- if table_filter %}
    and lower(table_name) in ('{{ table_filter }}')
    {% endif %}
    {%- if table_filter_fuzzy_exclude %}
    and lower(table_name) not like ('%{{ table_filter_fuzzy_exclude }}%')
    {% endif %}
),

yml_agg_columns as (
  select
    lower(table_schema) as source_schema,
    lower(table_name) as source_table,
    listagg(yml, '\n') within group (
      order by
        ordinal_position
    ) as yml_data
  from
    yml_gen
  group by
    1,
    2
)
select
  target_name,
  stage_ddl,
  'version: 2\n\n' ||
  'models:\n' ||
  '  - name: ' || split_part(stg.target_name,'.',0) || '\n' ||
  '    columns:\n' || 
  yml_data as yml_data
from
  stg_view_gen stg
  join yml_agg_columns yml on stg.source_schema = yml.source_schema
  and stg.source_table = yml.source_table